from ipole_many_models import runIPOLE
import numpy as np
  
def makePositronImages(simFile, Munit, positronRatios=np.linspace(0,1,2), nameBase='../ipole_output/positron_test/positron_test.h5', inclination=163.0, Rhigh=20, freq_Hz=228e9, \
    ipole='/work/epc964/ipole_HarvardCannonHPC_copy/aricarte/ipole+e-/ipole',fov=160.0, npixel=320, counterjet=0, rmax_geo=50):
#/work/epc964/ipole_HarvardCannonHPC_copy/aricarte/ipole+e-/ipole
#'/n/home13/anantua/ipole/aricarte/ipole+e-/ipole'

    #For a single dump file, make images for a variety of positron ratios. #rmax_geo=20 previous default
    for positronRatio in positronRatios:
        MunitOffset = 5.0e+24 #MADpt94:5e24,5e24,5e24,3.5e24 #MAD-pt5:1.4e25,9.e24,1.5e25,8.5e24 #SANE-pt5:2.6e28,8.e27,2e28,7.5e27 #Sim:R-Beta,RBetaBetaE,BetaC,BetaCBetaE  #1.2e+28 r50 1e28SaCrBetHyb  
        MunitSlope = 1.5e+0  #MADpt94:.2e1,.15e1,1.5e0,1.5e0 #MAD-pt5:.5e1,4.5e0,3.5e0,4.e0 #SANE-pt5:2.5e1,2e1,2.5e1,2.e1 #Sim:R-Beta,RBetaBetaE,BetaC,BetaCBetaE  #1.0e1  r50 1Pt5e1SaCrBetHyb
        MunitUsed = MunitOffset+ MunitSlope*Munit / (1. + 2.*positronRatio)#Optically Thin Approximation; 0.15positronRatio=ne+/(ne+ + ne-)?
        #The positron ratio is put in the filename. MunitUsed = Munit / (1. + 2.*positronRatio); (FluxMax-FluxMin)/(listMax-listMin)=fpos
        runIPOLE(simFile, nameBase.replace('.h5', '_{0:1.3f}.h5'.format(positronRatio)), MunitUsed, ipoleExecutable=ipole, thetacam=inclination, Rhigh=Rhigh, \
                 freq_Hz=freq_Hz, fov=fov, npixel=npixel, counterjet=counterjet, rmax_geo=rmax_geo, positronRatio=positronRatio,beta_crit_coefficient=.5,constant_beta_e0=0.01,beta_crit=1,electronModel=4,sigma_transition=2.0,sigma_cut=2.0)#Can modify Munit by using MunitUsed; electron temp model by electronModel

if __name__ == '__main__':
#    simFile = '/work/epc964/PositronModelingGRMHD/sims/n/holystore01/LABS/bhi/Lab/narayan_lab/grmhd_library_v3/MAD/a+0.94/288x128x128_KHARMA_2041/torus.out0.05000.h5'
             #'/n/holystore01/LABS/bhi/Lab/narayan_lab/grmhd_library_v3/MAD/a-0.5/288x128x128_KHARMA_2041/torus.out0.06000.h5'
             #'/n/holystore01/LABS/bhi/Lab/narayan_lab/grmhd_library/MAD/a+0.94/384x192x192_IHARM/dump_00002000.h5'
#    Munit = 7.48745e+24
#    Rhigh = 20
#    nameBase = '/work/epc964/ipole_HarvardCannonHPC_copy/aricarte/e+Output/positron_test_MADa+Pt94dump5000.h5'
             # '/n/home13/anantua/ipole/aricarte/e+Output/positron_test_MADa-Pt5dump06000.h5' 
             # '/n/home13/anantua/ipole/aricarte/e+Output/positron_test_MAD.h5'

#    positronRatios = np.linspace(0,1,2)#np.linspace(0,1,51)
#    makePositronImages(simFile, Munit, positronRatios, Rhigh=Rhigh, nameBase=nameBase)

    simFile = '/work/epc964/PositronModelingGRMHD/sims/n/holystore01/LABS/bhi/Lab/narayan_lab/grmhd_library_v3/SANE/a-0.5/288x128x128_KHARMA/torus.out0.05000.h5'
              # '/n/holystore01/LABS/bhi/Lab/narayan_lab/grmhd_library_v3/SANE/a-0.5/288x128x128_KHARMA/torus.out0.05000.h5'
              # '/n/holystore01/LABS/bhi/Lab/narayan_lab/grmhd_library_v3/SANE/a-0.5/288x128x128_KHARMA/torus.out0.06000.h5'
              # '/n/holystore01/LABS/bhi/Lab/narayan_lab/grmhd_library/SANE/a-0.5/288x128x128_IHARM/dump_00001500.h5'
              # '/n/holystore01/LABS/bhi/Lab/narayan_lab/grmhd_library/SANE/a-0.5/288x128x128_IHARM/dump_00001500.h5'
              # '/n/holystore01/LABS/bhi/Lab/narayan_lab/grmhd_library/SANE/a+0.94/288x128x128_IHARM/dump_00001500.h5' 
              # '/n/holystore01/LABS/bhi/Lab/narayan_lab/grmhd_library/SANE/a+0.94/288x128x128_IHARM/dump_00002000.h5'
    Munit = 1.82523e+27
    Rhigh = 20
    nameBase = '/work/epc964/ipole_HarvardCannonHPC_copy/aricarte/e+Output/positron_test_SANEa-Pt5dump5000.h5'
             #'/n/home13/anantua/ipole/aricarte/e+Output/positron_test_SANEa-Pt5dump5000.h5'
             #'/n/home13/anantua/ipole/aricarte/e+Output/positron_test_SANEa-Pt5dump6000.h5'      
             #'/n/home13/anantua/ipole/aricarte/e+Output/positron_test_SANEtorus_SigmaTransition1_SigmaCut2.h5'
             #'../ipole_output/SANE_a+0.94_R20.0_positrons/positron_test.h5'

    positronRatios = np.linspace(0,1,2)#np.linspace(0,1,51)
    makePositronImages(simFile, Munit, positronRatios, Rhigh=Rhigh, nameBase=nameBase)
